name: build x86_64-pc-windows-msvc
on: [push]
env:
   PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/etc/eselect/wine/bin
jobs:
  x86_64-pc-windows-msvc:
    runs-on: msvc-wine
    steps:
      - run: echo "SHORT_SHA=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV
      - run: git clone ${{ github.server_url }}/${{ github.repository }} ${SHORT_SHA}
      - run: cd ${SHORT_SHA} && git checkout ${{ github.sha }}
      - run: mkdir -p build/debug-work
      - run: mkdir -p build/release-work
      - run: mkdir nlohmann-json && cd nlohmann-json && wget -qO- https://www.burntcomma.com/nlohmann-json-3.11.2-x86_64-pc-windows-msvc.tar.gz | tar -xz
      - run: mkdir zlib && cd zlib && wget -qO- https://www.burntcomma.com/zlib-1.2.11-x86_64-pc-windows-msvc.tar.gz | tar -xz
      - run: mkdir libgit2 && cd libgit2 && wget -qO- https://www.burntcomma.com/libgit2-1.1.0-x86_64-pc-windows-msvc.tar.gz | tar -xz
      - run: mkdir tdscpp && cd tdscpp && wget -qO- ${{ github.server_url }}/maharmstone/tdscpp/releases/download/latest/x86_64-pc-windows-msvc.zip > tdscpp.zip && unzip tdscpp.zip
      - run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake -DCMAKE_FIND_ROOT_PATH="${PWD}/nlohmann-json;${PWD}/tdscpp/debug" -DCMAKE_PREFIX_PATH="${PWD}/libgit2/debug" -DZLIB_ROOT="${PWD}/zlib/debug" -DZLIB_INCLUDE_DIR="${PWD}/zlib/include" -DLIBGIT2_INCLUDE_DIRS="${PWD}/libgit2/include" -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${PWD}/build/debug -S ${SHORT_SHA} -B build/debug-work && cmake --build build/debug-work --parallel `nproc` && cmake --install build/debug-work
      - run: cmake -DCMAKE_TOOLCHAIN_FILE=msvc-amd64.cmake -DCMAKE_FIND_ROOT_PATH="${PWD}/nlohmann-json;${PWD}/tdscpp" -DCMAKE_PREFIX_PATH="${PWD}/libgit2" -DZLIB_ROOT="${PWD}/zlib" -DZLIB_INCLUDE_DIR="${PWD}/zlib/include" -DLIBGIT2_INCLUDE_DIRS="${PWD}/libgit2/include" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=${PWD}/build/release -S ${SHORT_SHA} -B build/release-work && cmake --build build/release-work --parallel `nproc` && cmake --install build/release-work
      - run: cp tdscpp/debug/bin/tdscpp.dll zlib/debug/bin/zlibd1.dll libgit2/debug/bin/libgit2.dll libgit2/bin/pcre.dll build/debug/bin/
      - run: cp tdscpp/bin/tdscpp.dll zlib/bin/zlib1.dll libgit2/bin/libgit2.dll libgit2/bin/pcre.dll build/release/bin/
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ github.sha }}
          overwrite: true
          path: |
            build/debug
            build/release
